#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import configparser
import os
import pprint
import re

import http.client
import http.server
import urllib.error
import urllib.parse
import urllib.request
import webbrowser

SCRIPT_VERSION = '0.0.0.0'

CONFIG_PATH = './config.ini'

pp = pprint.PrettyPrinter(indent=4)

class Config(object):

    def __init__(self, path):
        self.path = path

        if not os.path.isfile(path):
            self.createConfigFile()

        self.readConfigFile()

    def createConfigFile(self):
        newConfig = configparser.ConfigParser()

        newConfig['auth'] = {'app_id': '', 'secret': '', 'port': '8090'}
        newConfig['token'] = {'token': ''}

        with open(self.path, 'w') as configfile:
            newConfig.write(configfile)

    def readConfigFile(self):
        self.cfg = configparser.ConfigParser()
        self.cfg.read(self.path)
    
    def get(self, section=None, item=None):
        if item is None and section is None:
            return self.getAll()
        elif item is None:
            return self.getSection(section)
        else:
            return self.getItem(section, item)

    def getAll(self):
        data = {}
        for cfg_section in self.cfg.sections():
            data[cfg_section] = {}
            for key, val in self.cfg.items(cfg_section):
                data[cfg_section][key] = val
        return data

    def getSection(self, section):
        data = {}
        for key, val in self.cfg.items(section):
            data[key] = val
        return data

    def getItem(self, section, item):
        return self.cfg.get(section, item)

class DeezerAuth(object):
    urlAuth = 'https://connect.deezer.com/oauth/auth.php?app_id={0}&redirect_uri={1}&perms=basic_access,manage_library'
    urlToken = 'https://connect.deezer.com/oauth/access_token.php?app_id={0}&secret={1}&code={2}'
    urlRedirect = 'http://localhost:{0}/authfinish'

    def getToken(self):
        return self.token
    
    def setParams(self, params, token=''):
        self.port = int(params['port'])
        self.secret = params['secret']
        self.appId = params['app_id']
        self.token = token

    def authorize(self):
        self.fetchCode()
        self.fetchToken()            

    def fetchCode(self):
        redirect = self.urlRedirect.format(self.port)
        webbrowser.open(self.urlAuth.format(self.appId, redirect))
        self.startServer()
        try:
            while True:
                self.server.handle_request()
        except _Authorization as auth:
            self.code = auth.code

    def startServer(self):
        self.server = _AuthorizationServer('localhost', self.port)

    def fetchToken(self):
        url = self.urlToken.format(self.appId, self.secret, self.code)
        f = urllib.request.urlopen(url)
        fstr = f.read().decode('utf-8')

        if len(fstr.split('&')) != 2:
            raise Exception('Cant get token from deezer')

        self.token = fstr.split('&')[0].split('=')[1]

class _AuthorizationServer(http.server.HTTPServer):
    def __init__(self, host, port):
        http.server.HTTPServer.__init__(self, (host, port), _AuthorizationHandler)

    # Disable the default error handling.
    def handle_error(self, request, client_address):
        raise

class _AuthorizationHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        # Read access_token and use an exception to kill the server listening...
        if self.path.startswith('/authfinish?'):
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<script>close()</script>Thanks! You may now close this window.')
            raise _Authorization(re.search('code=([^&]*)', self.path).group(1))

        else:
            self.send_error(404)

    # Disable the default logging.
    def log_message(self, format, *args):
        pass

class _Authorization(Exception):
    def __init__(self, code):
        self.code = code

if __name__ == '__main__':
    config = Config(CONFIG_PATH)
    # pp.pprint(config.get())

    auth = DeezerAuth()
    auth.setParams(config.get('auth'))
    auth.authorize()
    pp.pprint(auth.getToken())