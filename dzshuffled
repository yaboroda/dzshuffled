#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import configparser
import os
import pprint
import re

import http.client
import http.server
import urllib.error
import urllib.parse
import urllib.request
import webbrowser

scriptVersion = '0.0.0.0'

configPath = './config.ini'

pp = pprint.PrettyPrinter(indent=4)

class Config(object):
    cfg = {}
    path = ''

    def __init__(self, path):
        self.path = path

        if not os.path.isfile(path):
            self.createConfigFile()

        self.readConfigFile()

    def createConfigFile(self):
        newConfig = configparser.ConfigParser()

        newConfig['app'] = {'app_id': '', 'secret': '', 'port': '8090'}
        newConfig['auth'] = {'token': ''}

        with open(self.path, 'w') as configfile:
            newConfig.write(configfile)

    def readConfigFile(self):
        configObj = configparser.ConfigParser()
        configObj.read(self.path)

        self.cfg = {}
        for section in configObj.sections():
            self.cfg[section] = {}
            for key, val in configObj.items(section):
                self.cfg[section][key] = val

class DeezerAuth(object):
    urlAuth = 'https://connect.deezer.com/oauth/auth.php?app_id={0}&redirect_uri={1}&perms=basic_access,manage_library'
    urlToken = 'https://connect.deezer.com/oauth/access_token.php?app_id={0}&secret={1}&code={2}'
    urlRedirect = 'http://localhost:{0}/authfinish'

    port = ''
    secret = ''
    appId = ''
    code = ''
    token = ''
    
    def setParams(self, port, secret, appId):
        self.port = int(port)
        self.secret = secret
        self.appId = appId

    def getCode(self):
        redirect = self.urlRedirect.format(self.port)
        webbrowser.open(self.urlAuth.format(self.appId, redirect))
        self.startServer('localhost', self.port)
        try:
            while True:
                self.server.handle_request()
        except _Authorization as auth:
            pp.pprint('code:')
            pp.pprint(auth.access_token)

    def startServer(self, host, port):
        self.server = _AuthorizationServer(host, port)

class _AuthorizationServer(http.server.HTTPServer):
    def __init__(self, host, port):
        http.server.HTTPServer.__init__(self, (host, port), _AuthorizationHandler)

    # Disable the default error handling.
    def handle_error(self, request, client_address):
        raise

class _AuthorizationHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        # Read access_token and use an exception to kill the server listening...
        if self.path.startswith('/authfinish?'):
            self.send_response(200)
            self.send_header('Content-Type', 'text/html')
            self.end_headers()
            self.wfile.write(b'<script>close()</script>Thanks! You may now close this window.')
            raise _Authorization(re.search('code=([^&]*)', self.path).group(1))

        else:
            self.send_error(404)

    # Disable the default logging.
    def log_message(self, format, *args):
        pass

class _Authorization(Exception):
    def __init__(self, access_token):
        self.access_token = access_token

if __name__ == '__main__':
    config = Config(configPath)

    auth = DeezerAuth()
    auth.setParams(
        config.cfg['app']['port'], 
        config.cfg['app']['secret'], 
        config.cfg['app']['app_id']
    )
    auth.getCode()