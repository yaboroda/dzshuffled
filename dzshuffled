#!/usr/bin/env python3

"""
author:     yaBoroda
github:     https://github.com/yaboroda/dzshuffled
email:      yarboroda@gmail.com
"""

import os
import pprint
import sys
import argparse
import subprocess

from dztoolset.deezerconfig import DeezerConfig
from dztoolset.deezerauth import DeezerAuth
from dztoolset.deezertool import DeezerTool
from dztoolset.deezerapiinteract import DeezerApiInteract, DeezerApiError

SCRIPT_VERSION = '1.2.4.0'
DEBUG_MODE = False
pp = pprint.PrettyPrinter(indent=4)

"""If environment var defined, set CONFIG_PATH from it,
else set to ~/.config/dzshuffled/config.ini
"""
if 'DZSHUFFLED_CONFIG_PATH' in os.environ:
    CONFIG_PATH = os.environ['DZSHUFFLED_CONFIG_PATH']
else:
    CONFIG_PATH = (os.path.expanduser("~")
                   + "/.config/dzshuffled/config.ini")


def handle_exception_output(e, template='{0}'):
    """If not DEBUG_MODE swallow tracing exception, output only message."""
    if not DEBUG_MODE:
        print(template.format(e))
    else:
        raise e


def print_help_and_exit(parser):
    parser.print_help()
    sys.exit()


def build_cli_parser():
    parser = argparse.ArgumentParser(
        description='This script will create playlist in your Deezer'
                    ' library consisting of shuffled tracks from your'
                    ' other playlists. Pass scenario name or number to'
                    ' create playlist from it. Pass -l or -lv to see'
                    ' all scenarios. Scenarios sets up in config wich'
                    ' by default in ~/.config/dzshuffled/config.ini but'
                    ' you can reassign it with DZSHUFFLED_CONFIG_PATH'
                    ' environment variable.'
    )

    parser.add_argument(
        'scenario',
        metavar='SCENARIO',
        nargs='?',
        const='',
        default='',
        help='name or number of scenario. Pass -l argument to see full list'
    )

    parser.add_argument(
        '-l', '--list',
        action='store_const',
        const=True,
        help='show full list of scenarios to create playlist from,'
             ' pass -v param to show info about them'
    )

    parser.add_argument(
        '-v', '--verbous',
        action='store_const',
        const=True,
        help='if called with argument -l, show info about listed scenarios'
    )

    parser.add_argument(
        '-i', '--info',
        action='store_const',
        const=True,
        help='show info about selected scenario but not do anithing'
    )

    parser.add_argument(
        '-e', '--edit',
        action='store_const',
        const=True,
        help=('edit config file vith editor specified in config, by default'
              ' it is Vim')
    )

    parser.add_argument(
        '--editor',
        metavar='EDITOR',
        default=None,
        help=('edit config with passed program instead of editor from config')
    )

    parser.add_argument(
        '-d', '--debug',
        action='store_const',
        const=True,
        help=('debug mode for output full trace of exceptions')
    )

    parser.add_argument(
        '--version',
        action='store_const',
        const=True,
        help='show script version'
    )

    return parser


def print_info_about_scenario(number, name, data=None):
    if data:
        print('[{0}] {1}'.format(number, name))
        pp.pprint(data)
    else:
        print('[{0}] {1}'.format(number, name))


def print_list_scenarios(dz_tool, verbosity=None):
    scenarios = dz_tool.get_list_of_scenarios()
    for i in range(len(scenarios)):
        if verbosity:
            print_info_about_scenario(
                i, scenarios[i], dz_tool.get_scenario_config(scenarios[i])
            )
        else:
            print_info_about_scenario(i, scenarios[i])


def process_cli_scenario_call(scenario_input, dz_tool, info_flag=None):
    if scenario_input.isnumeric():
        scenario_index = int(scenario_input)
        scenario_name = dz_tool.get_scenario_name_by_index(scenario_index)
    else:
        scenario_name = scenario_input
        scenario_index = dz_tool.get_scenario_index_by_name(scenario_name)

    if info_flag:
        print_info_about_scenario(
            scenario_index, scenario_name,
            dz_tool.get_scenario_config(scenario_name)
        )
    else:
        dz_tool.check_and_update_token()
        dz_tool.exec_scenario(scenario_name)


def edit_config(config, editor=None):
    if not editor:
        editor = config.get('system', 'editor')
    p = subprocess.Popen([editor, config.path])
    return p.wait()


def main():
    global DEBUG_MODE

    try:
        parser = build_cli_parser()
        args = parser.parse_args()

        if args.debug:
            DEBUG_MODE = True

        config = DeezerConfig(CONFIG_PATH)

        if args.version:
            print('version: {0}'.format(SCRIPT_VERSION))
            sys.exit()

        if args.edit:
            edit_config(config, args.editor)
            sys.exit()

        if not args.scenario and not args.list:
            print_help_and_exit(parser)

        dz_tool = DeezerTool(config, DeezerAuth(), DeezerApiInteract())

        if args.list:
            print_list_scenarios(dz_tool, args.verbous)
            sys.exit()

        if args.scenario:
            process_cli_scenario_call(args.scenario, dz_tool, args.info)
            sys.exit()

    except DeezerApiError as e:
        handle_exception_output(e)
    except Exception as e:
        handle_exception_output(e, 'Error: {0}')


if __name__ == '__main__':
    main()
